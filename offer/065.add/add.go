package offer

/*
剑指 Offer 65. 不用加减乘除做加法
写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。

示例:
输入: a = 1, b = 1
输出: 2

提示：
a, b 均可能是负数或 0
结果不会溢出 32 位整数
*/

/*
解题思路：
本题考察对位运算的灵活使用，即使用位运算实现加法。
设两数字的二进制形式 a,b ，其求和 s=a+b ，a(i) 代表 a 的二进制第 i 位，则分为以下四种情况：

a(i)	b(i)	无进位和 n(i)	进位 c(i+1)
0	0	0	0
0	1	1	0
1	0	1	0
1	1	0	1

观察发现，无进位和 与 异或运算 规律相同，进位 和 与运算 规律相同（并需左移一位）。因此，无进位和 n 与进位 c 的计算公式如下；
	1.非进位和：异或运算 => a ^ b
	2.进位和：与运算    => a & b

循环求 n 和 c ，直至进位 c=0 ；此时 s=n ，返回 n 即可。

举个例子：a=2 b=3
	a: 	010
	b:	011
进位和:  001 -> 赋给 a
非进位:  100 -> 赋给 b

	a: 	001
	b:	100
进位和:  101 -> 最终结果: 5
非进位:  000
*/

func add(a int, b int) int {
	for b != 0 {
		c := (a & b) << 1
		a ^= b
		b = c
	}

	return a
}
